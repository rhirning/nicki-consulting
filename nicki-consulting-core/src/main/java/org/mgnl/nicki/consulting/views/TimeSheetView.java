package org.mgnl.nicki.consulting.views;

import java.sql.SQLException;

import org.apache.commons.lang.StringUtils;
import org.mgnl.nicki.consulting.core.helper.Constants;
import org.mgnl.nicki.consulting.core.model.Time;
import org.mgnl.nicki.consulting.data.BeanContainerDataSource;
import org.mgnl.nicki.consulting.data.TimeWrapper;
import org.mgnl.nicki.consulting.db.TimeSelectException;
import org.mgnl.nicki.db.context.DBContext;
import org.mgnl.nicki.db.context.DBContextManager;
import org.mgnl.nicki.db.context.NotSupportedException;
import org.mgnl.nicki.db.profile.InitProfileException;
import org.mgnl.nicki.vaadin.base.menu.application.View;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

public class TimeSheetView extends BaseView implements View {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Table timeTable;
	@AutoGenerated
	private HorizontalLayout filterLayout;
	@AutoGenerated
	private ComboBox filterComboBox;
	@AutoGenerated
	private Button saveButton;

	private static final long serialVersionUID = 8329773710892387845L;
	private static final Logger LOG = LoggerFactory.getLogger(TimeSheetView.class);
	private BeanContainerDataSource<TimeWrapper> timeContainerDataSource;
	
	private boolean isInit;
	
	public TimeSheetView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@Override
	public void init() {
		if (!isInit) {
			timeContainerDataSource = new BeanContainerDataSource<>(TimeWrapper.class);
			timeTable.setContainerDataSource(timeContainerDataSource);
			timeTable.setVisibleColumns("member", "day", "start", "end", "pause", "text");
			timeTable.setColumnHeaders("Projekt", "Datum", "von", "bis", "Pause", "Tätigkeit");
//			timeTable.setColumnWidth("member", 400);
//			timeTable.setColumnWidth("day", 100);
//			timeTable.setColumnWidth("start", 100);
//			timeTable.setColumnWidth("end", 100);
			
			saveButton.addClickListener(event-> {save();});

			isInit = true;
		}
		loadTimes();
	}

	private void save() {
		if (!verify()) {
			Notification.show("Es gibt noch Fehler. Bitte suchen ;-)", Type.ERROR_MESSAGE);
			return;
		}

		try (DBContext dbContext = DBContextManager.getContext(Constants.DB_CONTEXT_NAME)) {
			for (TimeWrapper timeWrapper : timeContainerDataSource.getItemIds()) {
				saveOrIgnore(dbContext, timeWrapper.getTime());
			}
			loadTimes();
		} catch (SQLException | InitProfileException | NotSupportedException e) {
			LOG.error("Could not save times", e);
		}
	}

	private void saveOrIgnore(DBContext dbContext, Time time) throws NotSupportedException, SQLException, InitProfileException {
		if (time.getId() != null) {
			time.setHours(getHours(time));
			dbContext.update(time);
		} else if (time.getStart() != null) {
			time.setHours(getHours(time));
			dbContext.create(time);
		}
	}

	private Float getHours(Time time) {
		// calculate hours
		long millis = time.getEnd().getTime() - time.getStart().getTime();
		long mins = Math.round(millis/(1000.0 * 60));
		if (time.getPause() != null) {
			mins -= time.getPause();
		}
		return mins / 60.0f;
	}

	private boolean verify() {
		boolean ok = true;
		for (TimeWrapper timeWrapper : timeContainerDataSource.getItemIds()) {
			ok &= verify(timeWrapper.getTime());
		}
		return ok;
	}

	private boolean verify(Time time) {
		boolean empty = true;
		boolean ok = true;
		if (time.getMemberId() == null) {
			ok = false;
		} else {
			empty = false;
		}
		if (StringUtils.isBlank(time.getText())) {
			ok = false;
		} else {
			empty = false;
		}
		if (time.getStart() == null) {
			ok = false;
		} else {
			empty = false;
		}
		if (time.getEnd() == null) {
			ok = false;
		} else {
			empty = false;
		}
		
		return ok || empty;
	}

	private void loadTimes() {
		timeContainerDataSource.removeAllItems();
		try {
			timeContainerDataSource.addAll(getTimeWrapperss(getPerson(), 10));
		} catch (IllegalStateException | IllegalArgumentException | TimeSelectException | NoValidPersonException
				| NoApplicationContextException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// filterLayout
		filterLayout = buildFilterLayout();
		mainLayout.addComponent(filterLayout);
		
		// timeTable
		timeTable = new Table();
		timeTable.setImmediate(false);
		timeTable.setWidth("-1px");
		timeTable.setHeight("100.0%");
		mainLayout.addComponent(timeTable);
		mainLayout.setExpandRatio(timeTable, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildFilterLayout() {
		// common part: create layout
		filterLayout = new HorizontalLayout();
		filterLayout.setImmediate(false);
		filterLayout.setWidth("-1px");
		filterLayout.setHeight("-1px");
		filterLayout.setMargin(false);
		filterLayout.setSpacing(true);
		
		// saveButton
		saveButton = new Button();
		saveButton.setCaption("Speichern");
		saveButton.setImmediate(false);
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		filterLayout.addComponent(saveButton);
		
		// filterComboBox
		filterComboBox = new ComboBox();
		filterComboBox.setImmediate(false);
		filterComboBox.setWidth("-1px");
		filterComboBox.setHeight("-1px");
		filterLayout.addComponent(filterComboBox);
		
		return filterLayout;
	}

}
