package org.mgnl.nicki.consulting.views;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.mgnl.nicki.consulting.core.model.Customer;
import org.mgnl.nicki.consulting.core.model.Member;
import org.mgnl.nicki.consulting.core.model.Person;
import org.mgnl.nicki.consulting.core.model.Project;
import org.mgnl.nicki.consulting.data.BeanContainerDataSource;
import org.mgnl.nicki.consulting.data.MemberWrapper;
import org.mgnl.nicki.db.context.DBContext;
import org.mgnl.nicki.db.context.DBContextManager;
import org.mgnl.nicki.db.profile.InitProfileException;
import org.mgnl.nicki.vaadin.base.menu.application.View;
import org.mgnl.nicki.vaadin.db.editor.DbBeanCloseListener;
import org.mgnl.nicki.vaadin.db.editor.DbBeanViewer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.Component;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

public class CustomersView extends BaseView implements View {
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private VerticalLayout membersLayout;
	@AutoGenerated
	private VerticalLayout memberLayout;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_6;
	@AutoGenerated
	private Button newMemberButton;
	@AutoGenerated
	private Table membersTable;
	@AutoGenerated
	private VerticalLayout projectsLayout;
	@AutoGenerated
	private VerticalLayout projectLayout;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_4;
	@AutoGenerated
	private Button newProjectButton;
	@AutoGenerated
	private Table projectsTable;
	@AutoGenerated
	private VerticalLayout customersLayout;
	@AutoGenerated
	private VerticalLayout customerLayout;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_3;
	@AutoGenerated
	private Button newCustomerButton;
	@AutoGenerated
	private Table customersTable;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 1751419839762448157L;
	private static final Logger LOG = LoggerFactory.getLogger(CustomersView.class);
	private boolean isInit;
	private BeanContainerDataSource<Customer> customersContainerDataSource;
	private BeanContainerDataSource<Project> projectsContainerDataSource;
	private BeanContainerDataSource<MemberWrapper> membersContainerDataSource;
	
	private Window newCustomerWindow;
	private Window newProjectWindow;
	private Window newMemberWindow;
	private Window selectPersonWindow;

	public CustomersView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		newCustomerButton.addClickListener(event -> {
			showNewCustomerView();
		});
		customersTable.setSelectable(true);
		customersTable.addValueChangeListener(event -> {
			if (event.getProperty().getValue() != null) {
				showCustomer((Customer) event.getProperty().getValue());
			} else {
				hideCustomer();
			}
		});

		newProjectButton.addClickListener(event -> {
			showNewProjectView();
		});
		projectsTable.setSelectable(true);
		projectsTable.addValueChangeListener(event -> {
			if (event.getProperty().getValue() != null) {
				showProject((Project) event.getProperty().getValue());
			} else {
				hideProject();
			}
		});

		newMemberButton.addClickListener(event -> {
			showNewMemberView();
		});
		membersTable.setSelectable(true);
		membersTable.addValueChangeListener(event -> {
			if (event.getProperty().getValue() != null) {
				showMember((MemberWrapper) event.getProperty().getValue());
			} else {
				hideMember();
			}
		});
	}

	private void hideCustomer() {
		customerLayout.removeAllComponents();
		showProjectsLayout(false);
		showMembersLayout(false);
	}

	private void showCustomer(Customer customer) {
		showProjectsLayout(false);
		showMembersLayout(false);
		DbBeanViewer beanViewer = new DbBeanViewer(new DbBeanCloseListener() {
			
			@Override
			public void close(Component component) {
				hideCustomer();
				loadCustomers();
			}
		});
		beanViewer.setDbContextName("projects");
		beanViewer.setWidth("400px");
		beanViewer.setDbBean(customer);
		customerLayout.removeAllComponents();
		customerLayout.addComponent(beanViewer);
		showProjects(customer);
	}

	private void showProjects(Customer customer) {
		showProjectsLayout(true);
		loadProjects(customer);
	}

	private void showNewCustomerView() {
		DbBeanViewer beanViewer = new DbBeanViewer(new DbBeanCloseListener() {
			
			@Override
			public void close(Component component) {
				UI.getCurrent().removeWindow(newCustomerWindow);
				hideCustomer();
				loadCustomers();
			}
		});
		beanViewer.setDbContextName("projects");
		beanViewer.setWidth("400px");
		try {
			beanViewer.init(Customer.class);
		} catch (InstantiationException | IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		newCustomerWindow = new Window("Neuer Kunde", beanViewer);
		newCustomerWindow.setModal(true);
		UI.getCurrent().addWindow(newCustomerWindow);
	}

	private void hideProject() {
		projectLayout.removeAllComponents();
		showProjectsLayout(true);
		showMembersLayout(false);
	}

	private void showProject(Project project) {
		DbBeanViewer beanViewer = new DbBeanViewer(new DbBeanCloseListener() {
			
			@Override
			public void close(Component component) {
				hideProject();
				loadProjects((Customer) customersTable.getValue());
			}
		});
		beanViewer.setDbContextName("projects");
		beanViewer.setWidth("400px");
		beanViewer.setDbBean(project);
		
		projectLayout.removeAllComponents();
		projectLayout.addComponent(beanViewer);
		showMembers(project);
	}

	private void showMembers(Project project) {
		showMembersLayout(true);
		loadMembers(project);
	}

	private void showNewProjectView() {
		DbBeanViewer beanViewer = new DbBeanViewer(new DbBeanCloseListener() {
			
			@Override
			public void close(Component component) {
				UI.getCurrent().removeWindow(newProjectWindow);
				hideProject();
				loadProjects((Customer) customersTable.getValue());
			}
		});
		beanViewer.setDbContextName("projects");
		beanViewer.setWidth("400px");
		try {
			beanViewer.init(Project.class, customersTable.getValue());
		} catch (InstantiationException | IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		newProjectWindow = new Window("Neues Projekt", beanViewer);
		newProjectWindow.setModal(true);
		UI.getCurrent().addWindow(newProjectWindow);
	}

	private void showNewMemberView() {
		PersonSelector selector = new PersonSelector(person -> {
			UI.getCurrent().removeWindow(selectPersonWindow);
			setPerson(person);
			
		});
		selector.init();
		selectPersonWindow = new Window("Person wählen", selector);
		selectPersonWindow.setModal(true);
		UI.getCurrent().addWindow(selectPersonWindow);
	}

	private void setPerson(Person person) {
		DbBeanViewer beanViewer = new DbBeanViewer(new DbBeanCloseListener() {
			
			@Override
			public void close(Component component) {
				UI.getCurrent().removeWindow(newMemberWindow);
				hideMember();
				loadMembers((Project) projectsTable.getValue());
			}
		});
		beanViewer.setDbContextName("projects");
		try {
			beanViewer.init(Member.class, projectsTable.getValue(), person);
		} catch (InstantiationException | IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		newMemberWindow = new Window("Neues Projektmitglied", beanViewer);
		newMemberWindow.setModal(true);
		UI.getCurrent().addWindow(newMemberWindow);
	}

	private void hideMember() {
		memberLayout.removeAllComponents();
	}

	private void showMember(MemberWrapper memberWrapper) {
		DbBeanViewer beanViewer = new DbBeanViewer(new DbBeanCloseListener() {
			
			@Override
			public void close(Component component) {
				hideMember();
				loadMembers((Project) projectsTable.getValue());
			}
		});
		beanViewer.setDbContextName("projects");
		beanViewer.setWidth("400px");
		beanViewer.setDbBean(memberWrapper.getMember());
		
		memberLayout.removeAllComponents();
		memberLayout.addComponent(beanViewer);
	}

	@Override
	public void init() {
		if (!isInit) {
			customersContainerDataSource = new BeanContainerDataSource<Customer>(Customer.class);
			customersTable.setContainerDataSource(customersContainerDataSource);
			projectsContainerDataSource = new BeanContainerDataSource<Project>(Project.class);
			projectsTable.setContainerDataSource(projectsContainerDataSource);
			membersContainerDataSource = new BeanContainerDataSource<MemberWrapper>(MemberWrapper.class);
			membersTable.setContainerDataSource(membersContainerDataSource);
			loadCustomers();
			isInit = true;
			showCustomersLayout(true);
			showProjectsLayout(false);
			showMembersLayout(false);
		}
	}

	private void showCustomersLayout(boolean show) {
		customersLayout.setVisible(show);
		if (!show) {
			showProjectsLayout(false);
		}
		
	}

	private void showProjectsLayout(boolean show) {
		projectsLayout.setVisible(show);
		if (!show) {
			projectLayout.removeAllComponents();
			showMembersLayout(false);
		}
	}

	private void showMembersLayout(boolean show) {
		membersLayout.setVisible(show);
		if (!show) {
			memberLayout.removeAllComponents();
		}
	}

	private void loadCustomers() {
		Customer customer = new Customer();
		try (DBContext dbContext = DBContextManager.getContext("projects")) {
			List<Customer> customers = dbContext.loadObjects(customer, false);
			customersContainerDataSource.removeAllItems();
			customersContainerDataSource.addAll(customers);
			customersTable.setVisibleColumns("name", "city");

		} catch (InstantiationException | IllegalAccessException | SQLException | InitProfileException e) {
			LOG.error("Could not load customers", e);
		}
		
	}

	private void loadProjects(Customer customer) {
		Project project = new Project();
		project.setCustomerId(customer.getId());
		try (DBContext dbContext = DBContextManager.getContext("projects")) {
			List<Project> projects = dbContext.loadObjects(project, false);
			projectsContainerDataSource.removeAllItems();
			projectsContainerDataSource.addAll(projects);
			projectsTable.setVisibleColumns("name");
		} catch (InstantiationException | IllegalAccessException | SQLException | InitProfileException e) {
			LOG.error("Could not load projects", e);
		}		
	}

	private void loadMembers(Project project) {
		Member member= new Member();
		member.setProjectId(project.getId());
		try (DBContext dbContext = DBContextManager.getContext("projects")) {
			membersContainerDataSource.removeAllItems();
			List<Member> members= dbContext.loadObjects(member, true);
			List<MemberWrapper> memberWrappers = new ArrayList<>();
			for (Member m : members) {
				memberWrappers.add(new MemberWrapper(m));
			}
			membersContainerDataSource.addAll(memberWrappers);
			membersTable.setVisibleColumns("personName");
			membersTable.setColumnHeaders("Mitglied");
		} catch (InstantiationException | IllegalAccessException | SQLException | InitProfileException e) {
			LOG.error("Could not load members", e);
		}		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("100.0%");
		horizontalLayout_1.setMargin(false);
		
		// customersLayout
		customersLayout = buildCustomersLayout();
		horizontalLayout_1.addComponent(customersLayout);
		
		// projectsLayout
		projectsLayout = buildProjectsLayout();
		horizontalLayout_1.addComponent(projectsLayout);
		
		// membersLayout
		membersLayout = buildMembersLayout();
		horizontalLayout_1.addComponent(membersLayout);
		
		return horizontalLayout_1;
	}

	@AutoGenerated
	private VerticalLayout buildCustomersLayout() {
		// common part: create layout
		customersLayout = new VerticalLayout();
		customersLayout.setImmediate(false);
		customersLayout.setWidth("-1px");
		customersLayout.setHeight("-1px");
		customersLayout.setMargin(false);
		customersLayout.setSpacing(true);
		
		// horizontalLayout_3
		horizontalLayout_3 = buildHorizontalLayout_3();
		customersLayout.addComponent(horizontalLayout_3);
		
		// customerLayout
		customerLayout = new VerticalLayout();
		customerLayout.setImmediate(false);
		customerLayout.setWidth("100.0%");
		customerLayout.setHeight("100.0%");
		customerLayout.setMargin(false);
		customersLayout.addComponent(customerLayout);
		
		return customersLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_3() {
		// common part: create layout
		horizontalLayout_3 = new HorizontalLayout();
		horizontalLayout_3.setImmediate(false);
		horizontalLayout_3.setWidth("-1px");
		horizontalLayout_3.setHeight("-1px");
		horizontalLayout_3.setMargin(true);
		horizontalLayout_3.setSpacing(true);
		
		// customersTable
		customersTable = new Table();
		customersTable.setImmediate(true);
		customersTable.setCaption("Kunden");
		customersTable.setWidth("-1px");
		customersTable.setHeight("-1px");
		horizontalLayout_3.addComponent(customersTable);
		
		// newCustomerButton
		newCustomerButton = new Button();
		newCustomerButton.setCaption("Neu");
		newCustomerButton.setImmediate(true);
		newCustomerButton.setWidth("-1px");
		newCustomerButton.setHeight("-1px");
		horizontalLayout_3.addComponent(newCustomerButton);
		
		return horizontalLayout_3;
	}

	@AutoGenerated
	private VerticalLayout buildProjectsLayout() {
		// common part: create layout
		projectsLayout = new VerticalLayout();
		projectsLayout.setImmediate(false);
		projectsLayout.setWidth("-1px");
		projectsLayout.setHeight("-1px");
		projectsLayout.setMargin(false);
		
		// horizontalLayout_4
		horizontalLayout_4 = buildHorizontalLayout_4();
		projectsLayout.addComponent(horizontalLayout_4);
		
		// projectLayout
		projectLayout = new VerticalLayout();
		projectLayout.setImmediate(false);
		projectLayout.setWidth("100.0%");
		projectLayout.setHeight("100.0%");
		projectLayout.setMargin(false);
		projectsLayout.addComponent(projectLayout);
		
		return projectsLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_4() {
		// common part: create layout
		horizontalLayout_4 = new HorizontalLayout();
		horizontalLayout_4.setImmediate(false);
		horizontalLayout_4.setWidth("-1px");
		horizontalLayout_4.setHeight("-1px");
		horizontalLayout_4.setMargin(true);
		horizontalLayout_4.setSpacing(true);
		
		// projectsTable
		projectsTable = new Table();
		projectsTable.setImmediate(true);
		projectsTable.setCaption("Projekte");
		projectsTable.setWidth("-1px");
		projectsTable.setHeight("-1px");
		horizontalLayout_4.addComponent(projectsTable);
		
		// newProjectButton
		newProjectButton = new Button();
		newProjectButton.setCaption("Neu");
		newProjectButton.setImmediate(true);
		newProjectButton.setWidth("-1px");
		newProjectButton.setHeight("-1px");
		horizontalLayout_4.addComponent(newProjectButton);
		
		return horizontalLayout_4;
	}

	@AutoGenerated
	private VerticalLayout buildMembersLayout() {
		// common part: create layout
		membersLayout = new VerticalLayout();
		membersLayout.setImmediate(false);
		membersLayout.setWidth("-1px");
		membersLayout.setHeight("-1px");
		membersLayout.setMargin(false);
		membersLayout.setSpacing(true);
		
		// horizontalLayout_6
		horizontalLayout_6 = buildHorizontalLayout_6();
		membersLayout.addComponent(horizontalLayout_6);
		
		// memberLayout
		memberLayout = new VerticalLayout();
		memberLayout.setImmediate(false);
		memberLayout.setWidth("100.0%");
		memberLayout.setHeight("100.0%");
		memberLayout.setMargin(false);
		membersLayout.addComponent(memberLayout);
		
		return membersLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_6() {
		// common part: create layout
		horizontalLayout_6 = new HorizontalLayout();
		horizontalLayout_6.setImmediate(false);
		horizontalLayout_6.setWidth("-1px");
		horizontalLayout_6.setHeight("-1px");
		horizontalLayout_6.setMargin(true);
		horizontalLayout_6.setSpacing(true);
		
		// membersTable
		membersTable = new Table();
		membersTable.setImmediate(true);
		membersTable.setCaption("Projektmitglieder");
		membersTable.setWidth("-1px");
		membersTable.setHeight("-1px");
		horizontalLayout_6.addComponent(membersTable);
		
		// newMemberButton
		newMemberButton = new Button();
		newMemberButton.setCaption("Neu");
		newMemberButton.setImmediate(true);
		newMemberButton.setWidth("-1px");
		newMemberButton.setHeight("-1px");
		horizontalLayout_6.addComponent(newMemberButton);
		
		return horizontalLayout_6;
	}

}
