package org.mgnl.nicki.consulting.views;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.ParserConfigurationException;

import org.mgnl.nicki.consulting.core.model.Time;
import org.mgnl.nicki.consulting.db.TimeSelectException;
import org.mgnl.nicki.core.auth.InvalidPrincipalException;
import org.mgnl.nicki.core.helper.DataHelper;
import org.mgnl.nicki.template.engine.ConfigurationFactory.TYPE;
import org.mgnl.nicki.template.engine.TemplateEngine;
import org.mgnl.nicki.vaadin.base.components.Downloader;
import org.mgnl.nicki.vaadin.base.menu.application.View;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xml.sax.SAXException;

import com.lowagie.text.DocumentException;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.StreamResource;
import com.vaadin.server.StreamResource.StreamSource;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.VerticalLayout;

import freemarker.template.TemplateException;

public class ReportsView extends BaseView implements View  {
	private static final long serialVersionUID = -2330776406366438437L;
	private static final Logger LOG = LoggerFactory.getLogger(ReportsView.class);
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private Button generateReportButton;
	@AutoGenerated
	private HorizontalLayout filterLayout;
	@AutoGenerated
	private ComboBox projectComboBox;
	@AutoGenerated
	private ComboBox customerComboBox;
	@AutoGenerated
	private ComboBox timeComboBox;

	private boolean isInit;
	public ReportsView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}


	@Override
	public void init() {
		if (!isInit) {
			initTimeComboBox();
			initCustomerComboBox();
			initProjectComboBox();
			
			generateReportButton.addClickListener(event -> {
				Downloader.showDownload("Report", createPDFStream());
			});
			
		}
	}

	private List<Time> getReportData() {
		try {
			return getTimes(getPerson());
		} catch (TimeSelectException | NoValidPersonException | NoApplicationContextException e) {
			LOG.error("Error reading time");
		}
		return new ArrayList<>();
	}


	private void initTimeComboBox() {
		// TODO Auto-generated method stub
		
	}


	private void initCustomerComboBox() {
		// TODO Auto-generated method stub
		
	}


	private void initProjectComboBox() {
		// TODO Auto-generated method stub
		
	}


	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// filterLayout
		filterLayout = buildFilterLayout();
		mainLayout.addComponent(filterLayout);
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildFilterLayout() {
		// common part: create layout
		filterLayout = new HorizontalLayout();
		filterLayout.setImmediate(false);
		filterLayout.setWidth("-1px");
		filterLayout.setHeight("-1px");
		filterLayout.setMargin(true);
		filterLayout.setSpacing(true);
		
		// timeComboBox
		timeComboBox = new ComboBox();
		timeComboBox.setCaption("Zeitraum");
		timeComboBox.setImmediate(false);
		timeComboBox.setWidth("-1px");
		timeComboBox.setHeight("-1px");
		filterLayout.addComponent(timeComboBox);
		
		// customerComboBox
		customerComboBox = new ComboBox();
		customerComboBox.setCaption("Kunde");
		customerComboBox.setImmediate(false);
		customerComboBox.setWidth("-1px");
		customerComboBox.setHeight("-1px");
		filterLayout.addComponent(customerComboBox);
		
		// projectComboBox
		projectComboBox = new ComboBox();
		projectComboBox.setCaption("Projekt");
		projectComboBox.setImmediate(false);
		projectComboBox.setWidth("-1px");
		projectComboBox.setHeight("-1px");
		filterLayout.addComponent(projectComboBox);
		
		return filterLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(true);
		
		// generateReportButton
		generateReportButton = new Button();
		generateReportButton.setCaption("Report erzeugen");
		generateReportButton.setImmediate(false);
		generateReportButton.setWidth("-1px");
		generateReportButton.setHeight("-1px");
		horizontalLayout_1.addComponent(generateReportButton);
		
		return horizontalLayout_1;
	}

	
	private StreamResource createPDFStream() {
		return new StreamResource(new StreamSource() {
			private static final long serialVersionUID = 1L;

			@Override
			public InputStream getStream() {
				String template = "reports/TimeReport";

				TemplateEngine engine = TemplateEngine.getInstance(TYPE.CLASSPATH);
				Map<String, Object> params = new HashMap<String, Object>();
				params.put("data", getReportData());
				params.put("today", DataHelper.getDisplayDay(new Date()));
				try {
//					return engine.executeTemplate(template + ".ftl", params, "UTF-8");
					return engine.executeTemplateAsPdf2(template + ".ftl", params);
				} catch ( IOException | TemplateException | InvalidPrincipalException | ParserConfigurationException | SAXException | DocumentException  e) {
					LOG.error("Error generating WLAN Ticket", e);
				}
				return null;
			}
		}, "TimeReport.pdf");
	}

}
