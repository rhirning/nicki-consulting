package org.mgnl.nicki.consulting.views;

import java.util.List;

import org.mgnl.nicki.consulting.core.helper.TimeHelper;
import org.mgnl.nicki.consulting.core.model.Customer;
import org.mgnl.nicki.consulting.core.model.Member;
import org.mgnl.nicki.consulting.core.model.Project;
import org.mgnl.nicki.vaadin.base.menu.application.View;
import org.mgnl.nicki.vaadin.db.editor.DbBeanCloseListener;
import org.mgnl.nicki.vaadin.db.editor.DbBeanViewer;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbstractLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;

public class MyProjectsView extends BaseView implements View {

	private static final long serialVersionUID = -517846258408073414L;
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout dataLayout;
	@AutoGenerated
	private HorizontalLayout buttonsLayout;
	@AutoGenerated
	private ComboBox<PERIOD> timeComboBox;
	@AutoGenerated
	private ComboBox<Member> memberComboBox;
	
	private boolean isInit;

	public MyProjectsView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

	}

	@Override
	public void init() {
		initTimeComboBox(this.timeComboBox);
		try {
			loadMember();
		} catch (NoValidPersonException | NoApplicationContextException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (!isInit) {
			memberComboBox.addValueChangeListener(event -> {
				Member m = event.getValue();
				showMember(m);
			});
			//memberComboBox.setReadOnly(true);
			timeComboBox.addValueChangeListener(event -> {try {
				loadMember();
			} catch (NoValidPersonException | NoApplicationContextException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}});
		}
	}

	private void showMember(Member member) {
		dataLayout.removeAllComponents();
		if (member != null) {
			Project project = TimeHelper.getProject(member.getProjectId());
			Customer customer = TimeHelper.getCustomer(project.getCustomerId());
			addComponent(dataLayout, customer);
			addComponent(dataLayout, TimeHelper.getHoursForProject(project), project, "rate");
			addComponent(dataLayout, TimeHelper.getHoursForMember(member), member, "rate");
		}
	}
	
	

	private void addComponent(AbstractLayout dataLayout, float hours, Object bean, String... hiddenAttributes) {
		VerticalLayout layout = new VerticalLayout();
		layout.setSpacing(true);
		StringBuilder sb =  new StringBuilder();
		sb.append("gebucht: ");
		sb.append(TimeHelper.formatHours(hours));
		sb.append(" Stunden - ");
		sb.append(TimeHelper.formatHours(hours/8));
		sb.append(" Tage");
		layout.addComponent(new Label(sb.toString()));
		addComponent(layout, bean, hiddenAttributes);
		dataLayout.addComponent(layout);
	}

	private void addComponent(AbstractLayout layout, Object bean, String...hiddenAttributes) {

		DbBeanViewer beanViewer = new DbBeanViewer(new DbBeanCloseListener() {
			
			@Override
			public void close(Component component) {
			}
		});
		beanViewer.setReadOnly(true);
		beanViewer.setDbContextName("projects");
		beanViewer.setWidth("400px");
		beanViewer.setDbBean(bean, hiddenAttributes);
		layout.addComponent(beanViewer);
	}

	private void loadMember() throws NoValidPersonException, NoApplicationContextException {
		List<Member> members = getMembers(getPerson(), ((PERIOD) timeComboBox.getValue()).getPeriod());
		memberComboBox.setItems(members);
		memberComboBox.setItemCaptionGenerator(Member::getDisplayName);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// buttonsLayout
		buttonsLayout = buildButtonsLayout();
		mainLayout.addComponent(buttonsLayout);
		
		// dataLayout
		dataLayout = new HorizontalLayout();
		dataLayout.setWidth("-1px");
		dataLayout.setHeight("-1px");
		dataLayout.setMargin(true);
		dataLayout.setSpacing(true);
		mainLayout.addComponent(dataLayout);
		mainLayout.setExpandRatio(dataLayout, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildButtonsLayout() {
		// common part: create layout
		buttonsLayout = new HorizontalLayout();
		buttonsLayout.setWidth("-1px");
		buttonsLayout.setHeight("-1px");
		buttonsLayout.setMargin(true);
		buttonsLayout.setSpacing(true);
		
		// timeComboBox
		timeComboBox = new ComboBox<PERIOD>();
		timeComboBox.setCaption("Zeitraum");
		timeComboBox.setWidth("-1px");
		timeComboBox.setHeight("-1px");
		buttonsLayout.addComponent(timeComboBox);
		
		// memberComboBox
		memberComboBox = new ComboBox<Member>();
		memberComboBox.setCaption("Projekt");
		memberComboBox.setWidth("-1px");
		memberComboBox.setHeight("-1px");
		buttonsLayout.addComponent(memberComboBox);
		
		return buttonsLayout;
	}

}
